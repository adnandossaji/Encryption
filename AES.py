#!/usr/bin/python
# Adnan Dossaji

from copy import copy

sbox = [  0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
          0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
          0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
          0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
          0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
          0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
          0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
          0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
          0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
          0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
          0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
          0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
          0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
          0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
          0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
          0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16]

rcon = [  0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
          0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39,
          0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a,
          0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8,
          0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef,
          0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc,
          0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b,
          0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3,
          0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94,
          0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20,
          0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35,
          0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f,
          0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04,
          0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63,
          0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd,
          0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb]

def rotate(word, n):
  return word[n:] + word[0:n]

def subBytes(state):
  for i in range(len(state)):
    state[i] = sbox[state[i]]

  # print "round %s - after subBytes: %*s" % (numRound, 80, state)

def shiftRows(state):
    new_state = []

    state.append(state[0])
    state.append(state[5])
    state.append(state[10])
    state.append(state[15])

    state.append(state[4])
    state.append(state[9])
    state.append(state[14])
    state.append(state[3])

    state.append(state[8])
    state.append(state[13])
    state.append(state[2])
    state.append(state[7])

    state.append(state[12])
    state.append(state[1])
    state.append(state[6])
    state.append(state[11])

    del state[0:16]

  # print "round %s - after shiftRows: %*s" % (numRound, 80, state)

def galoisMult(a, b):
  p = 0
  hiBitSet = 0
  for i in range(8):
    if b & 1 == 1:
      p ^= a
    hiBitSet = a & 0x80
    a <<= 1
    if hiBitSet == 0x80:
      a ^= 0x1b
    b >>= 1
  return p % 256

def mixColumn(column):
  temp = copy(column)

  column[0] = galoisMult(temp[0],2) ^ galoisMult(temp[1],3) ^ galoisMult(temp[2],1) ^ galoisMult(temp[3],1)
  column[1] = galoisMult(temp[0],1) ^ galoisMult(temp[1],2) ^ galoisMult(temp[2],3) ^ galoisMult(temp[3],1)
  column[2] = galoisMult(temp[0],1) ^ galoisMult(temp[1],1) ^ galoisMult(temp[2],2) ^ galoisMult(temp[3],3)
  column[3] = galoisMult(temp[0],3) ^ galoisMult(temp[1],1) ^ galoisMult(temp[2],1) ^ galoisMult(temp[3],2)

def mixColumns(state):
  for i in range(4):
    column = []
  
    for j in range(4):
      column.append(state[i*4+j])

    mixColumn(column)

    for j in range(4):
      state[i*4+j] = column[j]

def aesRound(state, key):

  print "start of round - %s" % toHex(state)

  subBytes(state)
  print "after subBytes - %s" % toHex(state)

  shiftRows(state)
  print "after shiftRows - %s" % toHex(state)

  mixColumns(state)
  print "after mixColumns - %s" % toHex(state)

  old_state = copy(state)
  addRoundKey(state, key)
  new_key = copy(state)

  for i in range(len(state)):
    old_state[i] = old_state[i] ^ new_key[i]

  state = old_state

  # print "after addRoundKey - %s" % toHex(state)

def keyScheduleCore(word, i):
  word = rotate(word, 1)
  newWord = []
  for byte in word:
    newWord.append(sbox[byte])
  newWord[0] = newWord[0] ^ rcon[i]
  return newWord

def expandKey(cipherKey):
  cipherKeySize = len(cipherKey)

  expandedKey = []
  currentSize = 0
  rconIter = 1
  t = [0,0,0,0]

  for i in range(cipherKeySize):
    expandedKey.append(cipherKey[i])

  currentSize += cipherKeySize

  while currentSize < 256:
    for i in range(4):
      t[i] = expandedKey[(currentSize - 4) + i]

    if currentSize % cipherKeySize == 0:
      t = keyScheduleCore(t, rconIter)
      rconIter += 1

    if currentSize % cipherKeySize == 16:
      for i in range(4):
        t[i] = sbox[t[i]]

    for i in range(4):
      expandedKey.append(((expandedKey[currentSize - cipherKeySize]) ^ (t[i])))
      currentSize += 1
          
  return expandedKey

def createRoundKey(expandedKey, n):

  return expandedKey[((n)*16):((n)*16+16)]

# def g(part, n):

#   part.append(sbox[part[1]] ^ rcon[n])
#   part.append(sbox[part[2]])
#   part.append(sbox[part[3]])
#   part.append(sbox[part[0]])

#   del part[0:4]

# def transformKey(key, n):
#   W = []

#   W.append(key[0:4])
#   W.append(key[4:8])
#   W.append(key[8:12])
#   W.append(key[12:16])

#   temp_agn = W[3]



#   g(W[3], n)

#   temp = []

#   for i in range(4):
#     temp.append(W[0][i] ^ W[3][i])
#   W.append(temp)

#   temp2 = []
#   for i in range(4):
#     temp2.append(W[1][i] ^ temp[i])
#   W.append(temp2)

#   temp3 = []
#   for i in range(4):
#     temp3.append(W[2][i] ^ temp2[i])
#   W.append(temp3)

#   temp4 = []
#   for i in range(4):
#     temp4.append(temp_agn[i] ^ temp3[i])
#   W.append(temp4)

#   print temp

#   print W, "W"

#   return W

#   # print toHex(key)
#   # print"\n"

def encrypt(state, key, numRounds=11):


  expandedKey = expandKey(key)

  for i in range(0, numRounds):
    key = createRoundKey(expandedKey, i)

    print "round %s" % i
    if i == 0:

      addRoundKey(state, key)
      # print "after addRoundKey - %s" % toHex(state)
      # print "start of round %s - %s" % (i, toHex(state))
    elif i == 10:
      print "start of round - %s" % toHex(state)
      subBytes(state)
      print "after subBytes - %s" % toHex(state)

      shiftRows(state)
      print "after shiftRows - %s" % toHex(state)

      addRoundKey(state, key)
      print "output - %s" % toHex(state)
    else:
      aesRound(state, key)

    print "Round Key value - %s" % toHex(key)
    print "\n"


def addRoundKey(state, key):
  for i in range(len(state)):
    state[i] = state[i] ^ key[i]

def toHex(key):
  return map(hex, key)

def __main__():

  key   = [0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c]
  text  = [0x32, 0x43, 0xf6, 0xa8, 0x88, 0x5a, 0x30, 0x8d, 0x31, 0x31, 0x98, 0xa2, 0xe0, 0x37, 0x07, 0x34]

  encrypt(text, key)

  # print toHex(addRoundKey(text, key))

if __name__ == "__main__":
    __main__()